plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.sam'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

sourceSets {
	integrationTest {
		java {
			srcDir 'src/integrationTest/java'
		}
		resources {
			srcDir 'src/integrationTest/resources'
		}
		// Ensure integrationTest can access the classes from the main source set
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Repository test dependencies
	integrationTestImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	integrationTestImplementation 'org.springframework.boot:spring-boot-starter-test'
	integrationTestRuntimeOnly 'com.mysql:mysql-connector-j'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('integrationTest', Test) {
	description = 'Runs the integration tests.'
	group = 'verification'

	// Set test classes and classpath for repositoryTest
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath

	// Use JUnit for running the tests
	useJUnitPlatform()
}

// Handle duplicate resource files in repositoryTest
tasks.named('processIntegrationTestResources') {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}